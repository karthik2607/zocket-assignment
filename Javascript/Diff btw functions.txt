Difference btw normal function and arrow function in javascript

1.syntax  
function addNumbers(){
}
const addNumbers=()=>{
}

2.arguments
-arguments keyword can be used in normal function and spread operator shuld be used in arrow function

function addNumbers(){
console.log(arguments);
}
addNumbers(22,12,23,23);

const addNumbers=(...nums)=>{
console.log(nums);
}

addNumbers(10,23,4,3,2);


3.Hoisting
-Function can be called before initialising and after initialising using normal function and javascript allows it but in arrow function it can be called after intitialising.

4.this keyword
-Whenever we have object and have a function inside it can be easily accessed via this in normal function and in arrow function this denotes to the window of the browser.

const obj={
value:20,
myFunction: function (){
console.log("value is"+this.value);
}

obj.myFunction();


whereas in arrow function this refers to the window of the entire (global window) browser and not the particular object.




forEach - only used for internal purposes and for printing
map - used for creating new array without changing the original array
find,findIndex also used




..............
DOM

-alert function
-prompt function

- document.write()
- document.title = 'ABCD'
- document.body


..........................
querySelector

document.querySelector('div') --(tag name - selectors) chooses the first div it sees and renders only that

innerHTML also used

const username = document.querySelector('#username') - using id  (id # selectors)
username.innerText="jon doe"


const ele=document.querySelectorAll(".paragraph")
    ele.forEach((e)=>{
        document.write(e.innerHTML)
    })                                         -------using class (class name . selector)



...................................
getElementById

const text=document.getElementById('username')
    text.style.textDecoration="underline"
    text.style.color="blue"
text.remove()

Manipulating the username with javascript uing textdecoration and color without using css.



..................................................
getElementsByClassName

const el= document.getElementsByClassName("remove")
        for (let i = 0; i < el.length; i++) {
            el.item(i).remove();
        }





......................................................
addEventListener()

const click=document.getElementById("click")
    const body=document.querySelector("body");

    let cnt=0;

    click.addEventListener("click",()=>{
        cnt++;
        if(cnt%2===0){
        body.style.background="pink"
        }else{
            body.style.background="green"
        }

    })






click.addEventListener("click",()=>{
        const a=document.createElement("h1")
        a.innerText="Karthik Sudhan"
        a.style.color="blue"
        container.append(a);
        
        if(cnt%2===0){
        body.style.background="pink"
        }else{
            body.style.background="green"
        }
        
        if(cnt===4){
            container.remove(a);
        }
        cnt++

    })


.................................................................................
api fetch promise

Definitions of async and await
async:

The async keyword is used to define a function as asynchronous. An asynchronous function always returns a promise. It allows you to write asynchronous code that looks synchronous, making it easier to read and maintain.

await:

The await keyword is used inside an async function to pause the execution of the function until a promise is resolved or rejected. It makes the code behave in a more sequential manner, even when dealing with asynchronous operations.
Why They Are Used
To handle asynchronous operations (e.g., fetching data from a server, reading files, etc.) without using complex chains of .then() callbacks.
To write cleaner, more readable code for managing promises.
To avoid "callback hell" and improve error handling in asynchronous programming.


What is a Promise?
A Promise in JavaScript is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. It is used to handle asynchronous code in a more manageable and readable way, avoiding the need for deeply nested callbacks (commonly referred to as "callback hell").

fetch returns a promise for an HTTP request.
The await keyword waits for the promise to resolve, then proceeds to parse the JSON response.
Key Points
You must use await only inside async functions.
Errors in async functions can be caught using try...catch.

Handling Fulfilled and Rejected States
Use .then() for the fulfilled state.
Use .catch() for the rejected state.
Use .finally() for cleanup tasks (executed regardless of the outcome).



function fetchAndRenderAllPosts() {
            // Get the container element
            const postsContainer = document.getElementById('posts');

            // Fetch all posts
            fetch('https://jsonplaceholder.typicode.com/posts')
                .then(response => response.json())
                .then(posts => {
                    // Clear the loading message
                    postsContainer.innerHTML = '';

                    // Loop through each post and render it
                    posts.forEach(post => {
                        // Create a container for the post
                        const postElement = document.createElement('div');
                        postElement.classList.add('post');

                        // Create elements for the title and body
                        const titleElement = document.createElement('h2');
                        titleElement.textContent = post.title;

                        const bodyElement = document.createElement('p');
                        bodyElement.textContent = post.body;

                        // Append title and body to the post container
                        postElement.appendChild(titleElement);
                        postElement.appendChild(bodyElement);

                        // Append the post container to the main container
                        postsContainer.appendChild(postElement);
                    });
                })
                .catch(error => {
                    postsContainer.innerHTML = `<p>Error loading posts: ${error.message}</p>`;
                });
        }

        // Call the function
        fetchAndRenderAllPosts();



......................................................................................
API calling weather app

html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather</title>
</head>
<body>
    <input id="input-box" placeholder="London">
    <button id="search-button" onclick="click">Search</button>

    <div>
        <h4 id="cityname"></h4>
        <h3 id="citytime">
        </h3>
        <h3 id="citytemp"></h3>
    </div>


    <script src="script.js"></script>
    
</body>
</html>

script.js
const search=document.getElementById("input-box");
const button=document.getElementById("search-button");

const cityname=document.getElementById("cityname");
const citytime=document.getElementById("citytime");
const citytemp=document.getElementById("citytemp");

async function getData(CityName){
   const promise=await fetch(`http://api.weatherapi.com/v1/current.json?key=69220da574564a62bbf162912241112&q=${CityName}&aqi=no
`);
return await promise.json();
}

button.addEventListener('click', async()=>{
    const value=search.value;
    const result= await getData(value);
    cityname.innerText=`${result.location.name},${result.location.country}`
    citytime.innerText=result.location.localtime
    citytemp.innerText=result.current.temp_c

    
})





 

